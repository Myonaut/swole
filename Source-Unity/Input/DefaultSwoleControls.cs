//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/SwoleScript/Source-Unity/Input/DefaultSwoleControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Swole.Unity.InputSystem
{
    public partial class @DefaultSwoleControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultSwoleControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultSwoleControls"",
    ""maps"": [
        {
            ""name"": ""Standard"",
            ""id"": ""f39f3f79-c796-4350-923b-1c71b8c614a7"",
            ""actions"": [
                {
                    ""name"": ""LeftJoystickHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""ddaa5589-4c4c-4b15-9fd6-65decda70c42"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftJoystickVertical"",
                    ""type"": ""Value"",
                    ""id"": ""22c99de9-0bd9-4286-b927-398b592e9032"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightJoystickHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""2009e49b-c263-42c4-aeab-b99f5204ecc6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightJoystickVertical"",
                    ""type"": ""Value"",
                    ""id"": ""c2eb6e75-a8ad-406b-acd7-72bbf2e3ed62"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftBumper"",
                    ""type"": ""Button"",
                    ""id"": ""3fb8bb3c-b7c4-42e6-b5b1-064719cefd07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightBumper"",
                    ""type"": ""Button"",
                    ""id"": ""e9cb2cab-feaa-4c2c-acfe-562e276ed393"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorInput"",
                    ""type"": ""Value"",
                    ""id"": ""eb79c71b-aec1-43b6-94c8-48bc4d0d356d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8fc75f53-e01c-43d5-8ca4-dc0ade1f34f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""7c40ff31-16d1-47b8-8084-27d23f8c8d24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36719321-510f-4411-ac96-4ade80910a70"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftJoystickHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96f1779d-17a9-419b-9f1b-345fa9f84687"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftJoystickVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3979dd07-b1af-4eb3-949e-d8428c27153c"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightJoystickHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""391d7af1-3476-4b50-901e-ea56c567bffe"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightJoystickVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cee3ea22-128c-4c28-9020-2d7b42a9b036"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftBumper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f41145d-3bd7-4139-a931-f0dcdfe79996"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightBumper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""625f5b9e-6841-4bfb-ba21-9528e74de384"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CursorInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78c41d77-48c1-4136-8353-57e08855f45c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92dde0e5-cc59-422b-8f89-307caeae4dae"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a519c65-bfe8-458b-a29d-3486cafbe642"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ef454e3-76a4-4bfe-97b0-71b4e675b0ca"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MOBA"",
            ""id"": ""e7ffc1b3-eea5-4fdf-8cf1-2a525fc958d2"",
            ""actions"": [
                {
                    ""name"": ""AbilityQ"",
                    ""type"": ""Button"",
                    ""id"": ""6b4a9c8a-c2ce-43b1-8cb9-ce913250eb74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilityW"",
                    ""type"": ""Button"",
                    ""id"": ""f59ce2b3-88d4-43ab-b2a1-80148b5311fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilityE"",
                    ""type"": ""Button"",
                    ""id"": ""d6478da8-9847-497f-889f-65e75be80188"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilityR"",
                    ""type"": ""Button"",
                    ""id"": ""177d6fd5-fd95-4132-b7c1-d6d9ac145cfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8160698-b3db-447b-867a-b6cb647b163e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AbilityQ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a441af45-ab6e-478e-aa64-bdabf7a525ce"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AbilityQ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c02df8c-e4cd-4dc5-91fe-383f5ac21ee3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AbilityW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""721ca5a8-438f-4b44-adc9-4bdd9aa25112"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AbilityW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3faecdc8-3005-4cba-aae6-d0aef8fe5d9b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AbilityE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce170ac7-453c-4931-9869-1b7483c6204a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AbilityE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a501619-0e9e-43aa-b3ad-0e8acc0fbc28"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AbilityR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e26ab34-b33b-4cd9-89eb-fba071c1e052"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AbilityR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Standard
            m_Standard = asset.FindActionMap("Standard", throwIfNotFound: true);
            m_Standard_LeftJoystickHorizontal = m_Standard.FindAction("LeftJoystickHorizontal", throwIfNotFound: true);
            m_Standard_LeftJoystickVertical = m_Standard.FindAction("LeftJoystickVertical", throwIfNotFound: true);
            m_Standard_RightJoystickHorizontal = m_Standard.FindAction("RightJoystickHorizontal", throwIfNotFound: true);
            m_Standard_RightJoystickVertical = m_Standard.FindAction("RightJoystickVertical", throwIfNotFound: true);
            m_Standard_LeftBumper = m_Standard.FindAction("LeftBumper", throwIfNotFound: true);
            m_Standard_RightBumper = m_Standard.FindAction("RightBumper", throwIfNotFound: true);
            m_Standard_CursorInput = m_Standard.FindAction("CursorInput", throwIfNotFound: true);
            m_Standard_Jump = m_Standard.FindAction("Jump", throwIfNotFound: true);
            m_Standard_Pause = m_Standard.FindAction("Pause", throwIfNotFound: true);
            // MOBA
            m_MOBA = asset.FindActionMap("MOBA", throwIfNotFound: true);
            m_MOBA_AbilityQ = m_MOBA.FindAction("AbilityQ", throwIfNotFound: true);
            m_MOBA_AbilityW = m_MOBA.FindAction("AbilityW", throwIfNotFound: true);
            m_MOBA_AbilityE = m_MOBA.FindAction("AbilityE", throwIfNotFound: true);
            m_MOBA_AbilityR = m_MOBA.FindAction("AbilityR", throwIfNotFound: true);
        }

        ~@DefaultSwoleControls()
        {
            UnityEngine.Debug.Assert(!m_Standard.enabled, "This will cause a leak and performance issues, DefaultSwoleControls.Standard.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_MOBA.enabled, "This will cause a leak and performance issues, DefaultSwoleControls.MOBA.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Standard
        private readonly InputActionMap m_Standard;
        private List<IStandardActions> m_StandardActionsCallbackInterfaces = new List<IStandardActions>();
        private readonly InputAction m_Standard_LeftJoystickHorizontal;
        private readonly InputAction m_Standard_LeftJoystickVertical;
        private readonly InputAction m_Standard_RightJoystickHorizontal;
        private readonly InputAction m_Standard_RightJoystickVertical;
        private readonly InputAction m_Standard_LeftBumper;
        private readonly InputAction m_Standard_RightBumper;
        private readonly InputAction m_Standard_CursorInput;
        private readonly InputAction m_Standard_Jump;
        private readonly InputAction m_Standard_Pause;
        public struct StandardActions
        {
            private @DefaultSwoleControls m_Wrapper;
            public StandardActions(@DefaultSwoleControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftJoystickHorizontal => m_Wrapper.m_Standard_LeftJoystickHorizontal;
            public InputAction @LeftJoystickVertical => m_Wrapper.m_Standard_LeftJoystickVertical;
            public InputAction @RightJoystickHorizontal => m_Wrapper.m_Standard_RightJoystickHorizontal;
            public InputAction @RightJoystickVertical => m_Wrapper.m_Standard_RightJoystickVertical;
            public InputAction @LeftBumper => m_Wrapper.m_Standard_LeftBumper;
            public InputAction @RightBumper => m_Wrapper.m_Standard_RightBumper;
            public InputAction @CursorInput => m_Wrapper.m_Standard_CursorInput;
            public InputAction @Jump => m_Wrapper.m_Standard_Jump;
            public InputAction @Pause => m_Wrapper.m_Standard_Pause;
            public InputActionMap Get() { return m_Wrapper.m_Standard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(StandardActions set) { return set.Get(); }
            public void AddCallbacks(IStandardActions instance)
            {
                if (instance == null || m_Wrapper.m_StandardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_StandardActionsCallbackInterfaces.Add(instance);
                @LeftJoystickHorizontal.started += instance.OnLeftJoystickHorizontal;
                @LeftJoystickHorizontal.performed += instance.OnLeftJoystickHorizontal;
                @LeftJoystickHorizontal.canceled += instance.OnLeftJoystickHorizontal;
                @LeftJoystickVertical.started += instance.OnLeftJoystickVertical;
                @LeftJoystickVertical.performed += instance.OnLeftJoystickVertical;
                @LeftJoystickVertical.canceled += instance.OnLeftJoystickVertical;
                @RightJoystickHorizontal.started += instance.OnRightJoystickHorizontal;
                @RightJoystickHorizontal.performed += instance.OnRightJoystickHorizontal;
                @RightJoystickHorizontal.canceled += instance.OnRightJoystickHorizontal;
                @RightJoystickVertical.started += instance.OnRightJoystickVertical;
                @RightJoystickVertical.performed += instance.OnRightJoystickVertical;
                @RightJoystickVertical.canceled += instance.OnRightJoystickVertical;
                @LeftBumper.started += instance.OnLeftBumper;
                @LeftBumper.performed += instance.OnLeftBumper;
                @LeftBumper.canceled += instance.OnLeftBumper;
                @RightBumper.started += instance.OnRightBumper;
                @RightBumper.performed += instance.OnRightBumper;
                @RightBumper.canceled += instance.OnRightBumper;
                @CursorInput.started += instance.OnCursorInput;
                @CursorInput.performed += instance.OnCursorInput;
                @CursorInput.canceled += instance.OnCursorInput;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }

            private void UnregisterCallbacks(IStandardActions instance)
            {
                @LeftJoystickHorizontal.started -= instance.OnLeftJoystickHorizontal;
                @LeftJoystickHorizontal.performed -= instance.OnLeftJoystickHorizontal;
                @LeftJoystickHorizontal.canceled -= instance.OnLeftJoystickHorizontal;
                @LeftJoystickVertical.started -= instance.OnLeftJoystickVertical;
                @LeftJoystickVertical.performed -= instance.OnLeftJoystickVertical;
                @LeftJoystickVertical.canceled -= instance.OnLeftJoystickVertical;
                @RightJoystickHorizontal.started -= instance.OnRightJoystickHorizontal;
                @RightJoystickHorizontal.performed -= instance.OnRightJoystickHorizontal;
                @RightJoystickHorizontal.canceled -= instance.OnRightJoystickHorizontal;
                @RightJoystickVertical.started -= instance.OnRightJoystickVertical;
                @RightJoystickVertical.performed -= instance.OnRightJoystickVertical;
                @RightJoystickVertical.canceled -= instance.OnRightJoystickVertical;
                @LeftBumper.started -= instance.OnLeftBumper;
                @LeftBumper.performed -= instance.OnLeftBumper;
                @LeftBumper.canceled -= instance.OnLeftBumper;
                @RightBumper.started -= instance.OnRightBumper;
                @RightBumper.performed -= instance.OnRightBumper;
                @RightBumper.canceled -= instance.OnRightBumper;
                @CursorInput.started -= instance.OnCursorInput;
                @CursorInput.performed -= instance.OnCursorInput;
                @CursorInput.canceled -= instance.OnCursorInput;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
            }

            public void RemoveCallbacks(IStandardActions instance)
            {
                if (m_Wrapper.m_StandardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IStandardActions instance)
            {
                foreach (var item in m_Wrapper.m_StandardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_StandardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public StandardActions @Standard => new StandardActions(this);

        // MOBA
        private readonly InputActionMap m_MOBA;
        private List<IMOBAActions> m_MOBAActionsCallbackInterfaces = new List<IMOBAActions>();
        private readonly InputAction m_MOBA_AbilityQ;
        private readonly InputAction m_MOBA_AbilityW;
        private readonly InputAction m_MOBA_AbilityE;
        private readonly InputAction m_MOBA_AbilityR;
        public struct MOBAActions
        {
            private @DefaultSwoleControls m_Wrapper;
            public MOBAActions(@DefaultSwoleControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @AbilityQ => m_Wrapper.m_MOBA_AbilityQ;
            public InputAction @AbilityW => m_Wrapper.m_MOBA_AbilityW;
            public InputAction @AbilityE => m_Wrapper.m_MOBA_AbilityE;
            public InputAction @AbilityR => m_Wrapper.m_MOBA_AbilityR;
            public InputActionMap Get() { return m_Wrapper.m_MOBA; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MOBAActions set) { return set.Get(); }
            public void AddCallbacks(IMOBAActions instance)
            {
                if (instance == null || m_Wrapper.m_MOBAActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MOBAActionsCallbackInterfaces.Add(instance);
                @AbilityQ.started += instance.OnAbilityQ;
                @AbilityQ.performed += instance.OnAbilityQ;
                @AbilityQ.canceled += instance.OnAbilityQ;
                @AbilityW.started += instance.OnAbilityW;
                @AbilityW.performed += instance.OnAbilityW;
                @AbilityW.canceled += instance.OnAbilityW;
                @AbilityE.started += instance.OnAbilityE;
                @AbilityE.performed += instance.OnAbilityE;
                @AbilityE.canceled += instance.OnAbilityE;
                @AbilityR.started += instance.OnAbilityR;
                @AbilityR.performed += instance.OnAbilityR;
                @AbilityR.canceled += instance.OnAbilityR;
            }

            private void UnregisterCallbacks(IMOBAActions instance)
            {
                @AbilityQ.started -= instance.OnAbilityQ;
                @AbilityQ.performed -= instance.OnAbilityQ;
                @AbilityQ.canceled -= instance.OnAbilityQ;
                @AbilityW.started -= instance.OnAbilityW;
                @AbilityW.performed -= instance.OnAbilityW;
                @AbilityW.canceled -= instance.OnAbilityW;
                @AbilityE.started -= instance.OnAbilityE;
                @AbilityE.performed -= instance.OnAbilityE;
                @AbilityE.canceled -= instance.OnAbilityE;
                @AbilityR.started -= instance.OnAbilityR;
                @AbilityR.performed -= instance.OnAbilityR;
                @AbilityR.canceled -= instance.OnAbilityR;
            }

            public void RemoveCallbacks(IMOBAActions instance)
            {
                if (m_Wrapper.m_MOBAActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMOBAActions instance)
            {
                foreach (var item in m_Wrapper.m_MOBAActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MOBAActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MOBAActions @MOBA => new MOBAActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IStandardActions
        {
            void OnLeftJoystickHorizontal(InputAction.CallbackContext context);
            void OnLeftJoystickVertical(InputAction.CallbackContext context);
            void OnRightJoystickHorizontal(InputAction.CallbackContext context);
            void OnRightJoystickVertical(InputAction.CallbackContext context);
            void OnLeftBumper(InputAction.CallbackContext context);
            void OnRightBumper(InputAction.CallbackContext context);
            void OnCursorInput(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IMOBAActions
        {
            void OnAbilityQ(InputAction.CallbackContext context);
            void OnAbilityW(InputAction.CallbackContext context);
            void OnAbilityE(InputAction.CallbackContext context);
            void OnAbilityR(InputAction.CallbackContext context);
        }
    }
}
